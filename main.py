import igraph as ig
from find_longest_path import find_longest_path
from generate_random_graph import generate_random_graph

#This first section is the encoding of the gallai graph
g = ig.Graph(directed=False)

g.add_vertices(12)

for i in range(len(g.vs)):
    g.vs[i]["id"]= i
    g.vs[i]["label"]= str(i)

g.add_edges([(0,1),(1,2),(1,3),(2,4),(2,8),(3,7),(3,5),(4,5),(4,6),(5,9),(6,7),(7,8),(8,9),(6,10),(9,11)])


#Generating a random graph using an Erdos-Renyi generator that Python-igraph provides
g2 = ig.Graph.Erdos_Renyi(n=20, m=35, directed=False, loops=False)

#Finding the longest path of random Erdos-Renyi graph
L, P = find_longest_path(g2)
print(L)
print(P)

#Using my random graph generation algorithm to generate a random graph with provided vertices and edges
n = int(input("Number of Vertices: "))
m = int(input("Number of Edges: "))

g3 = generate_random_graph(n,m)

#Finding the longest path of the random graph generated by my algorithm
if g3 == None:
    print("Graph does not exist")
else:
    L, P = find_longest_path(g3)
    print(f'The longest path of this graph is: {L}')